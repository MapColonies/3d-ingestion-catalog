{{- $releaseName := .Release.Name -}}
{{- $chartName := include "catalog.name" . -}}
{{- $fullName := include "catalog.fullname" . -}}
{{- $cloudProviderFlavor := include "catalog.cloudProviderFlavor" . -}}
{{- $tag := include "catalog.tag" . -}}
{{- $cloudProviderImagePullSecretName := include "catalog.cloudProviderImagePullSecretName" . -}}
{{- $cloudProviderDockerRegistryUrl := include "catalog.cloudProviderDockerRegistryUrl" . -}}
{{- $ca := (include "merged.ca" . ) | fromYaml }}
{{- $podAnnotations := (include "merged.podAnnotations" . ) | fromYaml }}
{{- $extraVolumes := (include "merged.extraVolumes" . ) | fromYaml }}
{{- $extraVolumeMounts := (include "merged.extraVolumeMounts" . ) | fromYaml }}
{{- $sidecars := (include "merged.sidecars" . ) | fromYaml }}
{{- $postgres := (include "merged.postgres" . ) | fromYaml }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $fullName }}
  labels:
    app: {{ $chartName }}
    component: {{ $chartName }}
    release: {{ $releaseName }}
    {{- include "catalog.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  revisionHistoryLimit: {{ .Values.revisionHistoryLimit }}
  selector:
    matchLabels:
      app: {{ $chartName }}
      release: {{ $releaseName }}
      run: {{ $fullName }}
      {{- include "catalog.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        app: {{ $chartName }}
        release: {{ $releaseName }}
        run: {{ $fullName }}
        {{- include "catalog.selectorLabels" . | nindent 8 }}
      annotations:
        {{ include "mc-labels-and-annotations.annotations" . | nindent 8 }}
        {{ include "merged.podAnnotations" . | nindent 8 }}
      {{- if .Values.resetOnConfigChange }}
        checksum/configmap: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
      {{- end }}
    spec:
      {{- if $cloudProviderImagePullSecretName }}
      imagePullSecrets:
        - name: {{ $cloudProviderImagePullSecretName | quote }}
      {{- end }}
      containers:
        - name: {{ $fullName }}-deployment
          {{- with .Values.image }}
          image: {{ $cloudProviderDockerRegistryUrl }}{{ .repository }}:{{ $tag }}
          {{- end }}
          volumeMounts:
            {{- if $ca.enabled }}
            - mountPath: {{ printf "%s/%s" $ca.path $ca.key | quote }}
              name: root-ca
              subPath: {{ quote $ca.key }}
            {{- end }}
            {{- if $postgres.ssl.enabled }}
            - name: cert-conf
              mountPath: /tmp/certs
              readOnly: true
            {{- end }}
            {{- if $extraVolumeMounts -}}
              {{ toYaml $extraVolumeMounts | nindent 12 }}
            {{- end }}
          env:
            - name: DB_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ $postgres.user.secretName }}
                  key: username
            {{- if $postgres.user.requirePassword }}
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ $postgres.user.secretName }}
                  key: password
            {{- end }}
          envFrom:
            - configMapRef:
                name: {{ $fullName }}
          ports:
            - name: http
              containerPort: {{ .Values.env.targetPort }}
              protocol: {{ .Values.env.protocol }}
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
            httpGet:
              path: {{ .Values.livenessProbe.path }}
              port: {{ .Values.env.targetPort }}
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
            httpGet:
              path: {{ .Values.readinessProbe.path }}
              port: {{ .Values.env.targetPort }}
          {{- end }}
          {{- if .Values.resources.enabled }}
          resources:
            {{- toYaml .Values.resources.value | nindent 12 }}
          {{- end }}
        {{- if $sidecars }}
        {{ tpl ($sidecars) . | nindent 8 }}
        {{- end }}
      volumes:
        {{- if $postgres.ssl.enabled }}
        - name: cert-conf
          secret:
            secretName: {{ $postgres.ssl.secretName }}
        {{- end }}   
        {{- if $ca.enabled }}
        - name: root-ca
          secret:
            secretName: {{ $ca.secretName }}
        {{- end }}
        {{- if $extraVolumes -}}
          {{ tpl (toYaml $extraVolumes) . | nindent 8 }}
        {{- end }}
